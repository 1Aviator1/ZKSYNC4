// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	context "context"

	ids "github.com/ava-labs/avalanchego/ids"
	indexer "github.com/ava-labs/avalanchego/indexer"

	mock "github.com/stretchr/testify/mock"

	rpc "github.com/ava-labs/avalanchego/utils/rpc"
)

// IndexerClient is an autogenerated mock type for the Client type
type IndexerClient struct {
	mock.Mock
}

// GetContainerByID provides a mock function with given fields: ctx, containerID, options
func (_m *IndexerClient) GetContainerByID(ctx context.Context, containerID ids.ID, options ...rpc.Option) (indexer.Container, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, containerID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 indexer.Container
	if rf, ok := ret.Get(0).(func(context.Context, ids.ID, ...rpc.Option) indexer.Container); ok {
		r0 = rf(ctx, containerID, options...)
	} else {
		r0 = ret.Get(0).(indexer.Container)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ids.ID, ...rpc.Option) error); ok {
		r1 = rf(ctx, containerID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerByIndex provides a mock function with given fields: ctx, index, options
func (_m *IndexerClient) GetContainerByIndex(ctx context.Context, index uint64, options ...rpc.Option) (indexer.Container, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, index)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 indexer.Container
	if rf, ok := ret.Get(0).(func(context.Context, uint64, ...rpc.Option) indexer.Container); ok {
		r0 = rf(ctx, index, options...)
	} else {
		r0 = ret.Get(0).(indexer.Container)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, ...rpc.Option) error); ok {
		r1 = rf(ctx, index, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerRange provides a mock function with given fields: ctx, startIndex, numToFetch, options
func (_m *IndexerClient) GetContainerRange(ctx context.Context, startIndex uint64, numToFetch int, options ...rpc.Option) ([]indexer.Container, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startIndex, numToFetch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []indexer.Container
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int, ...rpc.Option) []indexer.Container); ok {
		r0 = rf(ctx, startIndex, numToFetch, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]indexer.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, int, ...rpc.Option) error); ok {
		r1 = rf(ctx, startIndex, numToFetch, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: ctx, containerID, options
func (_m *IndexerClient) GetIndex(ctx context.Context, containerID ids.ID, options ...rpc.Option) (uint64, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, containerID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, ids.ID, ...rpc.Option) uint64); ok {
		r0 = rf(ctx, containerID, options...)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ids.ID, ...rpc.Option) error); ok {
		r1 = rf(ctx, containerID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastAccepted provides a mock function with given fields: _a0, _a1
func (_m *IndexerClient) GetLastAccepted(_a0 context.Context, _a1 ...rpc.Option) (indexer.Container, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 indexer.Container
	if rf, ok := ret.Get(0).(func(context.Context, ...rpc.Option) indexer.Container); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(indexer.Container)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...rpc.Option) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAccepted provides a mock function with given fields: ctx, containerID, options
func (_m *IndexerClient) IsAccepted(ctx context.Context, containerID ids.ID, options ...rpc.Option) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, containerID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, ids.ID, ...rpc.Option) bool); ok {
		r0 = rf(ctx, containerID, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ids.ID, ...rpc.Option) error); ok {
		r1 = rf(ctx, containerID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
